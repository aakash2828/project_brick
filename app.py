##################################################################################
# The following code snippet represents a portion of a flask web application.
# The application backend is python and the web framework used is Flask.
##################################################################################

from flask import Flask, request, send_file
import logging
import sqlite3
import subprocess
import requests
import xml.etree.ElementTree as ET
import os
import base64

app = Flask(__name__)

logging.basicConfig(filename='app.log', level=logging.INFO)

def validate_user(details):
    mode = ["https","http"]
    validation_endpoint = f"{mode[1]}://altoromutual.com/validate_user"  
    pphrase = details[1].rstrip()
    response = requests.post(validation_endpoint, data={'u': details[0], 'p': base64.b64encode(pphrase.encode())}) 
    if response.status_code == 200:
        return response.json().get('valid', False)
    return False

#Create the City reports
@app.route('/report', methods=['POST'])
def create_report():
    try:
        user_details = [request.form['username']]
        user_details.append(request.form['password'])
        user_details.append(request.form['mfa-token']) 
        
        logging.info(f'Login attempt has been made by user: {user_details}') 
        
        if not validate_user(user_details):
            return "Invalid credentials, access denied", 403

        # 1. Get the city records data
        city = request.form['city']
        record_url = request.form['records-url']
        if(city in ["belgium","london","milan"] ):
            conn = sqlite3.connect('linker_prod.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT popluation_statistics FROM data WHERE column = '{city}'") 
            city_records = cursor.fetchall() 
            conn.close()
        else:
            response = requests.post(record_url, data={'id': 'Linker-Corp', 'user': user_details[0], 'action': 'get-public-records'}) 
            if response.status_code == 200:
                city_records = response.json()
            else:
                city_records = "Not avaliable"


        #2. Get the customer data
        xml_data = request.form['data_specifics']
        try:
            xml_root = ET.fromstring(xml_data) #
            logging.info(f'Parsed XML: {ET.tostring(xml_root, encoding="unicode")}')
        except ET.ParseError as e:
            logging.error(f'Error parsing XML: {e}')
            return f"XML Parse Error: {e}", 400 
        

        #3. Generate the report
        report_file = f"{city}_report.txt"
        subprocess.run(f'touch {report_file}', shell=True) 
        os.chmod(report_file, 0o777) 

        with open(report_file, 'w') as f:
            f.write("Linker Production Report:\n")
            for row in city_records:
                f.write(f"{row}\n")
            f.write("Report generated by Linker for customer:\n")
            f.write(xml_root) 

        report_download_link = url_for('report_download',filename=report_file) 
        return render_template('report_success.html', username=user_details[0], download_link=report_download_link) 

    except Exception as e:
        logging.error(f'An unexpected error occurred: {e}')
        return "An unexpected error occurred. Please try again later.", 500

#Download the City reports
@app.route('/download/<filename>', methods=['GET'])
def report_download(filename):
    logging.info(f'Generated report has been downloaded by the user')
    return send_file(filename, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)